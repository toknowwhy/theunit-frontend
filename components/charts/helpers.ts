// Defines the structure of a symbol generated by generateSymbol
interface Symbol {
    short: string;
    full: string;
  }
  
  // Defines the structure of a symbol parsed by parseFullSymbol
  interface ParsedSymbol {
    exchange: string;
    fromSymbol: string;
    toSymbol: string;
  }
  
  // Makes requests to CryptoCompare API
  export async function makeApiRequest(path: string): Promise<any> {
    try {
      const response = await fetch(`https://min-api.cryptocompare.com/${path}`);
      return response.json();
    } catch (error: any) { // Using any type for error as Fetch doesn't define a specific error type
      throw new Error(`CryptoCompare request error: ${error.status}`);
    }
  }
  
  // Generates a symbol ID from a pair of the coins
  export function generateSymbol(exchange: string, fromSymbol: string, toSymbol: string): Symbol {
    const short = `${fromSymbol}/${toSymbol}`;
    return {
      short,
      full: `${exchange}:${short}`,
    };
  }
  
  // Returns all parts of the symbol
  export function parseFullSymbol(fullSymbol: string): ParsedSymbol | null {
    const match = fullSymbol.match(/^(\w+):(\w+)\/(\w+)$/);
    if (!match) {
      return null;
    }
  
    return {
      exchange: match[1],
      fromSymbol: match[2],
      toSymbol: match[3],
    };
  }
  
  export interface SymbolInfo {
    symbol: any;
    full_name: string;
    ticker: string;
    name: string;
    description: string;
    type: string;
    session: string;
    timezone: string;
    exchange: string;
    minmov: number;
    pricescale: number;
    has_intraday: boolean;
    has_no_volume: boolean;
    has_weekly_and_monthly: boolean;
    supported_resolutions: string[];
    volume_precision: number;
    data_status: string;
  }
  